<!-- Ant build.xml - Need Ant v1.5 or later -->
<project name="martus" default="build" basedir=".">

  <!-- set global properties for this build -->
  <property file="build.properties" />
  <property environment="env"/>

  <property name="dist"  value="dist"/>
  <property name="docs"  value="TechDocs/javadocs"/>
  <property name="martus-dir" value="org/martus"/>
  <property name="martus-package" value="org.martus"/>
  
  <property name="common-dir" value="${martus-dir}/common"/>
  <property name="common-jar" value= "${dist}/martus-common.jar"/>
  <property name="common-package" value="${martus-package}.common"/>
  <property name="BuildDateFile" value="${common-dir}/BuildDate.txt"/>
  <property name="common-files" value="${common-dir}/*.class,
  					${BuildDateFile}
  					"/>

  <property name="server-dir" value="${martus-dir}/server"/>
  <property name="server-jar" value= "${dist}/martus-server.jar"/>
  <property name="server-package" value="${martus-package}.server"/>
  <property name="server-files" value="${server-dir}/*.class,
  					${server-dir}/core/*.class,
  					${server-dir}/foramplifiers/*.class,
  					${server-dir}/forclients/*.class,
  					${server-dir}/formirroring/*.class,
  					${server-dir}/tools/*.class
  					"/>

  <property name="client-dir" value="${martus-dir}/client"/>
  <property name="client-jar" value= "${dist}/martus.jar"/>
  <property name="client-package" value="${martus-package}.client"/>
  <property name="client-files" value="${client-dir}/*.class,
  			${client-dir}/test/*.class,
  			${client-dir}/core/*.class,
  			${client-dir}/core/main-class.txt,
  			${client-dir}/swingui/*.class,
    			${client-dir}/swingui/Martus-es.mtf,
    			${client-dir}/swingui/MartusHelp-en.txt,
    			${client-dir}/swingui/MartusHelp-es.txt,
    			${client-dir}/swingui/MartusHelpTOC-en.txt,
    			${client-dir}/swingui/MartusHelpTOC-es.txt,
    			${client-dir}/swingui/MartusLogo.gif,
    			${client-dir}/swingui/locked.jpg,
    			${client-dir}/swingui/Martus.png,
    			${client-dir}/swingui/unlocked.jpg
    			"/>

  <property name="meta-dir" value="${martus-dir}/meta"/>
  <property name="meta-jar" value= "${dist}/martus-meta.jar"/>
  <property name="meta-package" value="${martus-package}.meta"/>
  <property name="meta-files" value="${meta-dir}/*.class"/>
  
<!-- ================================================================== -->
<!-- I N I T                                                            -->
<!-- ================================================================== -->  
  <target name="init">
    <!-- tstamp task initializes ${DSTAMP} etc -->
    <tstamp/>
  </target>

<!-- ================================================================== -->
<!-- C L E A N                                                          -->
<!-- ================================================================== -->
  <target name="clean">
  
    <!-- Remove dis jars & folder -->
    <delete verbose="true" includeEmptyDirs="true">
        <fileset dir="${dist}" includes="*.jar"/>
    </delete>
    <delete dir="${dist}"/>
    
    <delete file="${BuildDateFile}"/>
    
    <!-- Remove common class files -->
    <delete>
        <fileset dir="${common-dir}" includes="*.class"/>
    </delete>
    
    <!-- Remove meta class files -->
    <delete>
        <fileset dir="${meta-dir}" includes="*.class"/>
    </delete>
    
    <!-- Remove client class files -->
    <delete>
        <fileset dir="${client-dir}" includes="*.class"/>
        <fileset dir="${client-dir}/test/" includes="*.class"/>
        <fileset dir="${client-dir}/core/" includes="*.class"/>
        <fileset dir="${client-dir}/swingui/" includes="*.class"/>
    </delete>
    
    <!-- Remove server class files -->
    <delete>
        <fileset dir="${server-dir}" includes="*.class"/>
        <fileset dir="${server-dir}/core/" includes="*.class"/>
        <fileset dir="${server-dir}/foramplifiers/" includes="*.class"/>
        <fileset dir="${server-dir}/forclients/" includes="*.class"/>
        <fileset dir="${server-dir}/formirroring/" includes="*.class"/>
        <fileset dir="${server-dir}/tools/" includes="*.class"/>
    </delete>
  </target>

<!-- ================================================================== -->
<!-- B U I L D                                                          -->
<!-- ================================================================== -->
  <target name="build" depends="init">

    <echo message="${DSTAMP}" file="${BuildDateFile}"/>
    <javac srcdir="${common-dir}" failonerror="true"/>

    <javac srcdir="${server-dir}" classpath="${common-dir}" failonerror="true"/>
    <javac srcdir="${server-dir}/core" classpath="${common-dir}" failonerror="true"/>
    <javac srcdir="${server-dir}/foramplifiers" classpath="${common-dir}" failonerror="true"/>
    <javac srcdir="${server-dir}/forclients" classpath="${common-dir}" failonerror="true"/>
    <javac srcdir="${server-dir}/formirroring" classpath="${common-dir}" failonerror="true"/>
    <javac srcdir="${server-dir}/tools" classpath="${common-dir}" failonerror="true"/>

    <javac srcdir="${client-dir}" classpath="${common-dir}" failonerror="true"/>
    <javac srcdir="${client-dir}/core" classpath="${common-dir}" failonerror="true"/>
    <javac srcdir="${client-dir}/swingui" classpath="${common-dir}" failonerror="true"/>
    <javac srcdir="${client-dir}/test" classpath="${common-dir}" failonerror="true"/>

    <javac srcdir="${meta-dir}" classpath="${common-dir};${client-dir};${server-dir}" failonerror="true"/>

    <mkdir dir="${dist}"/>
    <jar jarfile="${common-jar}" basedir="." 
    		includes="${common-files}"/>
    <jar jarfile="${server-jar}" basedir="." 
    		includes="${server-files}, 
    				${server-files}/core,
    				${server-files}/foramplifiers,
    				${server-files}/forclients,
    				${server-files}/formirroring,
    				${server-files}/tools,
    				${common-files}"/>
    <jar jarfile="${client-jar}" basedir="." 
			manifest="${client-dir}/core/main-class.txt" 
    		includes="${client-files}/core,
    				${client-files}/swingui,
    				${client-files}/test,
    				${common-files}"/>
    <jar jarfile="${meta-jar}" basedir="." 
    		includes="${meta-files}, 
    				${common-files}, 
    				${server-files},
    				${client-files}"/>

  </target>

<!-- ================================================================== -->
<!-- T E S T S                                                          -->
<!-- ================================================================== -->
  <target name="test-common" depends="build">
		<junit fork="true" haltonfailure="yes" printsummary="withOutAndErr">
			<classpath>
				<pathelement location="${common-jar}"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
			<test name="${common-package}.TestCommon"/>
		</junit>
  </target>

  <target name="test-server" depends="build">
		<junit fork="true" haltonfailure="yes" printsummary="withOutAndErr">
			<classpath>
				<pathelement location="${server-jar}"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
			<test name="${server-package}.core.TestAll"/>
		</junit>
  </target>

  <target name="test-client" depends="build">
		<junit fork="true" haltonfailure="yes" printsummary="withOutAndErr">
			<classpath>
				<pathelement location="${client-jar}"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
			<test name="${client-package}.test.TestAll"/>
		</junit>
  </target>

  <target name="testall" depends="build">
		<junit fork="true" haltonfailure="yes" printsummary="withOutAndErr">
			<classpath>
				<pathelement location="${meta-jar}"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
			<test name="${meta-package}.TestAll"/>
		</junit>	
  </target>
  
<!-- ================================================================== -->
<!-- J A V A D O C S                                                    -->
<!-- ================================================================== -->
	<target name="docs">
			<mkdir dir="${docs}"/>
			<javadoc
					destdir="${docs}"
					sourcepath="."
      		packagenames="${martus-package}.*"
					access="private"
					use="false"
					bottom="Copyright &#169; 2003 Beneficent Technology, Inc. (Benetech)."
					/>
	</target>

<!-- ================================================================== -->
<!-- J A R S I G N E R                                                  -->
<!-- ================================================================== -->
	<target name="jarsigner" depends="build">
		<signjar jar="${client-jar}"
						keystore="${sign.keystore}"
						storepass="${sign.storepass}"
						keypass="${sign.keypass}"
						alias="ssmtsjar"
						/>

		<signjar jar="${server-jar}"
						keystore="${sign.keystore}"
						storepass="${sign.storepass}"
						keypass="${sign.keypass}"
						alias="ssmtsjar"
						/>
						
		<signjar jar="${common-jar}"
						keystore="${sign.keystore}"
						storepass="${sign.storepass}"
						keypass="${sign.keypass}"
						alias="ssmtsjar"
						/>
						
		<signjar jar="${meta-jar}"
						keystore="${sign.keystore}"
						storepass="${sign.storepass}"
						keypass="${sign.keypass}"
						alias="ssmtsjar"
						/>
	</target>
	
<!-- ================================================================== -->
<!-- M D 5                                                              -->
<!-- ================================================================== -->
	<target name="md5" depends="jarsigner">
		<checksum>
			<fileset dir="${dist}">
				<include name="*.jar"/>
			</fileset>
		</checksum>
	</target>
	
<!-- ================================================================== -->
<!-- C V S  -   T A G                                                   -->
<!-- ================================================================== -->
	<target name="cvs-tag" depends="init">
		<cvspass cvsroot="${cvs.cvsroot}"
				 password="${cvs.pass}"
		/>
		<cvs cvsRoot="${cvs.cvsroot}"
				 package="martus"
				 quiet="true"
				 command="tag v${DSTAMP}"
		/>
	</target>
	
<!-- ================================================================== -->
<!-- Z I P  -  S O U R C E S                                            -->
<!-- ================================================================== -->
	<target name="zip-src" depends="init">
		<mkdir dir="${dist}"/>
		<property name="zip-filename"  value="${dist}/martus-${DSTAMP}-src.zip"/>
		<delete file="${zip-filename}"/>
		
		<zip zipfile="${zip-filename}"
					basedir="."
					includes="org/**/*.java,
										org/**/MartusHelpTOC-*.txt,
										org/**/Martus-*.mtf,
										org/**/MartusLogo.gif,
										org/**/Martus.png,
										org/**/*locked.jpg"
       		excludes="org/martus/server/**,org/martus/meta/**"
					/>
		<!-- Set a variable if the library sources exists-->
	</target>
	
	<target name="zip-lib-src" depends="zip-src" if="env.MARTUSISPROJECTDIR">
		<property name="zip-filename"  value="${dist}/martus-${DSTAMP}-src.zip"/>
		<echo message="dir = ${env.MARTUSISPROJECTDIR}"/>
		<zip zipfile="${zip-filename}"
					basedir="."
					includes="${env.MARTUSISPROJECTDIR}/BuildFiles/SourceFiles/BouncyCastle/*,
										${env.MARTUSISPROJECTDIR}/BuildFiles/SourceFiles/Sun/*,
										${env.MARTUSISPROJECTDIR}/BuildFiles/SourceFiles/InfiniteMonkey1.0/src/**/*,
										${env.MARTUSISPROJECTDIR}/BuildFiles/SourceFiles/InfiniteMonkey1.0/**/*.txt,
										${env.MARTUSISPROJECTDIR}/BuildFiles/SourceFiles/junit3.7/**/src.jar,
										${env.MARTUSISPROJECTDIR}/BuildFiles/SourceFiles/xmlrpc-1.1/**/*"
       		excludes=""
					/>
	</target>

</project>

